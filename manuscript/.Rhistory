rabid$prog_dist_lnorm = progenitors$prog_dist;
rabid$prog_time_lnorm = progenitors$prog_time
# Lognormal convolution tree
progenitors = read.csv("output/progenitors_lognormal_conv.csv")
rabid$progenitor_conv_lnorm = progenitors$progenitors;
rabid$prog_dist_conv_lnorm = progenitors$prog_dist;
rabid$prog_time_conv_lnorm = progenitors$prog_time
int = 250
ms = seq(0, 45000, int)
kms = ms/1000
time_breaks = seq(0,3000,1)
prog_kernel = hist(rabid$prog_dist/1000, breaks=kms, plot=FALSE)$counts/length(which(!is.na(rabid$prog_dist)))
prog_kernel2 = hist(rabid$prog_dist2/1000, breaks=kms, plot=FALSE)$counts/length(which(!is.na(rabid$prog_dist2)))
prog_kernel_lnorm = hist(rabid$prog_dist_lnorm/1000, breaks=kms, plot=FALSE)$counts/length(which(!is.na(rabid$prog_dist_lnorm)))
prog_kernel2_lnorm = hist(rabid$prog_dist2_lnorm/1000, breaks=kms, plot=FALSE)$counts/length(which(!is.na(rabid$prog_dist2_lnorm)))
prog_SIdist = hist(rabid$prog_time, breaks=time_breaks, plot=FALSE)$counts/length(which(!is.na(rabid$prog_time)))
prog_SIdist_lnorm = hist(rabid$prog_time_lnorm, breaks=time_breaks, plot=FALSE)$counts/length(which(!is.na(rabid$prog_time_lnorm)))
prog_SIdist2 = hist(rabid$prog_time_conv, breaks=time_breaks, plot=FALSE)$counts/length(which(!is.na(rabid$prog_time_conv)))
prog_SIdist2_lnorm = hist(rabid$prog_time_conv_lnorm, breaks=time_breaks, plot=FALSE)$counts/length(which(!is.na(rabid$prog_time_conv_lnorm)))
DK_params <- read.csv("output/DK_params.csv")
SI_params <-  read.csv("output/SI_params.csv")
par(mfrow=c(1,2))
# Distance kernel - # Gamma distribution & convolution
plot(kms, int*dgamma(ms+(int/1000), shape = DK_params$DK_shape, rate = 1/DK_params$DK_scale), type="l", ylim=c(0,0.5), xlim=c(0,10), ylab="Probability", lwd=2) #
lines(kms, int*dgamma(ms+(int/1000), shape = DK_params$DK2_shape, rate = 1/DK_params$DK2_scale))
points(kms[-1]-((int/1000)/2), prog_kernel, pch=20, cex=.5) # points(kms[-1]-((int/1000)/2), prog_kernel2, pch=21, cex=.5)
# Distance kernel # Lognormal distribution & convolution
lines(kms, int*dlnorm(ms+(int/1000), DK_params$DK_meanlog, DK_params$DK_sdlog), col="red", lwd=2) #
lines(kms, int*dlnorm(ms+(int/1000), DK_params$DK2_meanlog, DK_params$DK2_sdlog), col="red")
points(kms[-1]-((int/1000)/2), prog_kernel_lnorm, pch=20, cex=.6, col="red") #points(kms[-1]-((int/1000)/2), prog_kernel2_lnorm, pch=21, cex=.5)
legend(3,0.4, legend = c("Gamma", "Gamma convolved", "Lognormal", "Lognormal convolved"),
lwd=c(2,1,2,1), col=c("black","black","red","red"), bty="n", cex=.7)
# Serial Interval- Gamma distribution & convolution
day=1; intervals = seq(0,365,day)
plot(intervals, dgamma(intervals, shape = SI_params$SI_shape, rate = 1/SI_params$SI_scale), type="l", ylim=c(0,0.04), xlim=c(0,180), ylab="Probability", lwd=2) #
lines(intervals, dgamma(intervals, shape = SI_params$SI2_shape, rate = 1/SI_params$SI2_scale))
points(intervals[-1], prog_SIdist[intervals[-1]], pch=20, cex=.6) # points(intervals[-1], prog_SIdist2[intervals[-1]], pch=21, cex=.5)
# Serial Interval-Lognormal distribution & convolution
lines(intervals, dlnorm(intervals, SI_params$SI_ml, SI_params$SI_sdlog), type="l", lwd=2, col="red") #
lines(intervals, dlnorm(intervals, SI_params$SI2_ml, SI_params$SI2_sdlog), col="red")
points(intervals[-1], prog_SIdist_lnorm[intervals[-1]], pch=20, cex=0.6, col="red") # points(intervals[-1], prog_SIdist2_lnorm[intervals[-1]],  col="red", pch=21, cex=0.5)
par(mfrow=c(2,2), mar=c(2,2,.5,0.5), mgp=c(1,0.25,0), tck=-0.025)
# Distance kernel - Gamma distribution & convolution
plot(kms, int*dgamma(ms+(int/1000), shape = DK_params$DK_shape, rate = 1/DK_params$DK_scale),
type="l", ylim=c(0,0.3), xlim=c(0,10), ylab="Probability", xlab = "Km", lwd=2) #
lines(kms, int*dgamma(ms+(int/1000), shape = DK_params$DK2_shape, rate = 1/DK_params$DK2_scale))
points(kms[-1]-((int/1000)/2), prog_kernel, pch=20, cex=.6)
mtext("A", at = -1.5, line=-1, cex=1.3)
# Lognormal & convolution
plot(kms, int*dlnorm(ms+(int/1000), DK_params$DK_meanlog, DK_params$DK_sdlog), type="l", ylim=c(0,0.3), xlim=c(0,10),
ylab="Probability", xlab = "Km", lwd=2, col="red")
lines(kms, int*dlnorm(ms+(int/1000), DK_params$DK2_meanlog, DK_params$DK2_sdlog), col="red")
points(kms[-1]-((int/1000)/2), prog_kernel_lnorm, pch=20, cex=.6, col="red") #points(kms[-1]-((int/1000)/2), prog_kernel2_lnorm, pch=21, cex=.5)
legend(3,0.2, legend = c("Gamma", "Gamma convolution", "Lognormal", "Lognormal convolution"),
lwd=c(2,1,2,1), col=c("black","black","red","red"), bty="n", cex=.9)
mtext("B", at = -1.5, line=-1, cex=1.3)
# Serial Interval - Gamma distribution & convolution
plot(intervals, dgamma(intervals, shape = SI_params$SI_shape, rate = 1/SI_params$SI_scale), type="l",
ylim=c(0,0.04), xlim=c(0,180), ylab="Probability", xlab = "Days", lwd=2) #
lines(intervals, dgamma(intervals, shape = SI_params$SI2_shape, rate = 1/SI_params$SI2_scale))
points(intervals[-1], prog_SIdist[intervals[-1]], pch=20, cex=.6)
mtext("C", at = -27, line=-1, cex=1.3)
# Serial Interval-Lognormal distribution & convolution
plot(intervals, dlnorm(intervals, SI_params$SI_ml, SI_params$SI_sdlog), col="red", ylim=c(0,0.04), xlim=c(0,180),
ylab="Probability", xlab = "Days", type="l", lwd=2)
lines(intervals, dlnorm(intervals, SI_params$SI2_ml, SI_params$SI2_sdlog), col="red")
points(intervals[-1], prog_SIdist_lnorm[intervals[-1]], pch=20, cex=0.6, col="red") # points(intervals[-1], prog_SIdist2_lnorm[intervals[-1]],  col="red", pch=21, cex=0.5)
mtext("D", at = -27, line=-1, cex=1.3)
detection = function(criterion, prog_dist){
index = which(kms > criterion) # identify which cases had progenitors further away than a given criterion
uncertain = sum(hist(prog_dist/1000, breaks=kms, plot=FALSE)$counts[index], na.rm=TRUE) # idenitfy cases further than this
expected = 1-plnorm(criterion * 1000, DK_params$DK_meanlog, DK_params$DK_sdlog) # determine the expectation from the pdf
missing = uncertain - (expected*n) # roughly estimate missing cases (based on number in dataset)
detection = 1 - (missing/(n + missing)) # report the detection probability
print(
list(expected, missing, detection)
)
}
detection(2, rabid$prog_dist); detection(2, rabid$prog_dist_lnorm) # 86-84%
detection(2.5, rabid$prog_dist); detection(2.5, rabid$prog_dist_lnorm) # 88-87%
detection(3, rabid$prog_dist); detection(3, rabid$prog_dist_lnorm)  # 90-89 %
Rmax = max(rabid$progenitor_lnorm, na.rm=TRUE) +1 # 11335 plus one so includes max
R = hist(rabid$progenitor, breaks=-1:Rmax, plot=F)$counts[-1]
R_lnorm = hist(rabid$progenitor_lnorm, breaks=-1:Rmax, plot=F)$counts[-1]
R_conv = hist(rabid$progenitor_conv, breaks=-1:Rmax, plot=F)$counts[-1]
R_lnorm_conv = hist(rabid$progenitor_conv_lnorm, breaks=-1:Rmax, plot=F)$counts[-1]
rabid$R = rabid$R_lnorm = rabid$R_conv = rabid$R_lnorm_conv = NA
for (i in 1:nrow(rabid)){
rabid$R_lnorm[i]=R_lnorm[rabid$ID[i]]
rabid$R[i]=R[rabid$ID[i]]
rabid$R_conv[i]=R_conv[rabid$ID[i]]
rabid$R_lnorm_conv[i]=R_lnorm_conv[rabid$ID[i]]
print(i)
}
years = 2002:2021 # sequence for plotting
start = 1; end = 365*(length(years)-1) # Jan 2002 until present
months = 1:(12*(length(years)-1))
ys = seq(0, max(months), 12)
qs = seq(0, max(months), 3)
# end_m <- floor(as.numeric(Sys.Date()-start.date)/30.5) # alternative check:
end_m <- floor(as.numeric(end.date-start.date)/30.5) # alternative check:
case_ts_m = hist(rabid$ms, breaks=0:(end_m+1), plot=FALSE)$counts
sse_ts_m = hist(rabid$ms[which(rabid$R>5)], breaks=0:(end_m+1), plot=FALSE)$counts
sse_ts_lnorm = hist(rabid$ms[which(rabid$R_lnorm>5)], breaks=0:(end_m+1), plot=FALSE)$counts
sse_ts_conv = hist(rabid$ms[which(rabid$R_conv>5)], breaks=0:(end_m+1), plot=FALSE)$counts
sse_ts_conv_lnorm = hist(rabid$ms[which(rabid$R_lnorm_conv>5)], breaks=0:(end_m+1), plot=FALSE)$counts
par(mfrow=c(2,2))
ys = 2002:2015
# Gamma
ts = rbind(case_ts_m - sse_ts_m, sse_ts_m)
mids <- barplot(ts, col = c("grey", "red"), border=NA)
axis(1, at = mids[seq(1, max(end_m), 12)], labels = ys, tck=-0.03)
text(60, 50, sum(sse_ts_m)); text(60, 60, "Gamma") # 18
# lnorm
ts = rbind(case_ts_m - sse_ts_lnorm, sse_ts_lnorm)
mids <- barplot(ts, col = c("grey", "red"), border=NA)
axis(1, at = mids[seq(1, max(end_m), 12)], labels = ys, tck=-0.03)
text(60, 50, sum(sse_ts_lnorm)); text(60, 60, "Lognormal") # 19
# gamma convolution
ts = rbind(case_ts_m - sse_ts_conv, sse_ts_conv)
mids <- barplot(ts, col = c("grey", "red"), border=NA)
axis(1, at = mids[seq(1, max(end_m), 12)], labels = ys, tck=-0.03)
text(60, 50, sum(sse_ts_conv)); text(60, 60, "Convolved gamma")
# lognormal convolution
ts = rbind(case_ts_m - sse_ts_conv_lnorm, sse_ts_conv_lnorm)
mids <- barplot(ts, col = c("grey", "red"), border=NA)
axis(1, at = mids[seq(1, max(end_m), 12)], labels = ys, tck=-0.03)
text(60, 50, sum(sse_ts_conv_lnorm)); text(60, 60, "Convolved lognormal")
offspring = hist(rabid$R, breaks = -1:20, plot=FALSE)$counts
offspring_lnorm = hist(rabid$R_lnorm, breaks = -1:20, plot=FALSE)$counts
offspring_conv = hist(rabid$R_conv, breaks = -1:20, plot=FALSE)$counts
offspring_lnorm_conv = hist(rabid$R_lnorm_conv, breaks = -1:20, plot=FALSE)$counts
par(mfrow=c(1,2))
plot(0:20, offspring, pch=20, ylab = "Counts", xlab = "Offspring")
points(0:20, offspring_lnorm, pch=20, col="red") # Lognormal
points(0:20, offspring_conv, pch=21) # Convolution are the open circles....
points(0:20, offspring_lnorm_conv, pch=21, col="red")
plot(0:20, offspring, pch=20, ylab = "Counts", xlab = "Offspring", ylim = c(0,75))
points(0:20, offspring_lnorm, pch=20, col="red")
points(0:20, offspring_conv, pch=21)
points(0:20, offspring_lnorm_conv, pch=21, col="red")
lines(rep(5,100), 1:100)
thresholds = c(0.975, 0.95)
outliers = round((1-(thresholds))*n); outliers # 80 cases over 97.5% threshold, 161 over 95%
id_outliers <- function(DK_data, SI_data, threshold, distribution = "lognormal", DK_pars, SI_pars){
outliers <- round((1-(threshold))*length(DK_data)) # expected outliers
# print(outliers)
x = 1000000
if(distribution == "lognormal"){ # calculate the thresholds for the given distribution
DK_crit <- qlnorm(threshold, meanlog = DK_pars[1], sdlog = DK_pars[2]) # distance kernel
SI_crit <- qlnorm(threshold, meanlog = SI_pars[1], sdlog = SI_pars[2]) # generation interval
DK_double_crit = quantile(rlnorm(x, DK_pars[1], DK_pars[2]) + rlnorm(x, DK_pars[1], DK_pars[2]), threshold) # convolutions
SI_double_crit = quantile(rlnorm(x, SI_pars[1], SI_pars[2]) + rlnorm(x, SI_pars[1], SI_pars[2]), threshold)
} else { # calculate the thresholds for the given distribution
DK_crit <- qgamma(threshold, shape = DK_pars[1], scale = DK_pars[2])
SI_crit <- qgamma(threshold, shape = SI_pars[1], scale = SI_pars[2])
DK_double_crit = quantile(rgamma(x, shape = DK_pars[1], scale = DK_pars[2]) + rgamma(x, shape = DK_pars[1], scale = DK_pars[2]), threshold)
SI_double_crit = quantile(rgamma(x, shape = SI_pars[1], scale = SI_pars[2]) + rgamma(x, shape = SI_pars[1], scale = SI_pars[2]), threshold)
} # report the numebrs of outliers for the given thresholds
data.frame(outliers = outliers, DK_crit = DK_crit, DK_crit2 = DK_double_crit, SI_crit = SI_crit, SI_crit2 = SI_double_crit,
DK_outliers = sort(DK_data[which(DK_data > DK_crit)])[outliers],
DK_outlier_conv = sort(DK_data[which(DK_data>DK_double_crit)])[outliers],
SI_outliers = sort(SI_data[which(SI_data > SI_crit)])[outliers],
SI_outliers_conv = sort(SI_data[which(SI_data>SI_double_crit)])[outliers])
}
# Look at different thresholds, distributions (progenitors from trees) for both the SI and DK
# Note that the convolution thresholds were not applied to the convolution trees
lnorm.95 <- id_outliers(DK_data = rabid$prog_dist_lnorm, SI_data = rabid$prog_time_lnorm, 0.95, "lognormal",
c(DK_params$DK_meanlog, DK_params$DK_sdlog), c(SI_params$SI_ml, SI_params$SI_sdlog))
lnorm.975 <- id_outliers(DK_data = rabid$prog_dist_lnorm, SI_data = rabid$prog_time_lnorm, 0.975, "lognormal",
c(DK_params$DK_meanlog, DK_params$DK_sdlog), c(SI_params$SI_ml, SI_params$SI_sdlog))
gamma.95 <- id_outliers(DK_data = rabid$prog_dist, SI_data = rabid$prog_time, 0.95, "gamma",
c(DK_params$DK_shape, DK_params$DK_scale), c(SI_params$SI_shape, SI_params$SI_scale))
gamma.975 <- id_outliers(DK_data = rabid$prog_dist, SI_data = rabid$prog_time, 0.975, "gamma",
c(DK_params$DK_shape, DK_params$DK_scale), c(SI_params$SI_shape, SI_params$SI_scale))
inc_975_gamma <- assign_incursions(rabid, rabid$progenitor, rabid$prog_dist, rabid$prog_time, gamma.975$SI_crit, gamma.975$DK_crit, gamma.975$DK_crit2)
inc_95_gamma <- assign_incursions(rabid, rabid$progenitor, rabid$prog_dist, rabid$prog_time, gamma.95$SI_crit, gamma.95$DK_crit, gamma.95$DK_crit2)
inc_975_lnorm <- assign_incursions(rabid, rabid$progenitor_lnorm, rabid$prog_dist_lnorm, rabid$prog_time_lnorm, lnorm.975$SI_crit, lnorm.975$DK_crit, lnorm.975$DK_crit2)
inc_95_lnorm <- assign_incursions(rabid, rabid$progenitor_lnorm, rabid$prog_dist_lnorm, rabid$prog_time_lnorm, lnorm.95$SI_crit, lnorm.95$DK_crit, lnorm.95$DK_crit2)
incursions = c(sum(inc_975_lnorm), sum(inc_95_lnorm), sum(inc_975_gamma), sum(inc_95_gamma))
incursions/n
long = cbind(rabid$prog_time > gamma.95$SI_crit, rabid$prog_time > gamma.975$SI_crit);
sum(long[,1], na.rm=TRUE); sum(long[,2], na.rm=TRUE) # 111 cases over 93 days (97.5%), 192 over 78 days (95%)
# Lognormal
long_lnorm = cbind(rabid$prog_time_lnorm > lnorm.95$SI_crit, rabid$prog_time_lnorm > lnorm.975$SI_crit)
sum(long_lnorm[,1], na.rm=TRUE); sum(long_lnorm[,2], na.rm=TRUE) # 66 cases over 104 days (97.5%), 136 over 79 days (95%)
# DISTANCE KERNEL (examine if inferred progenitors from gamma, lognormal and convolved trees are over critical thresholds (single & double))
# Gamma
far = cbind(rabid$prog_dist > gamma.95$DK_crit, rabid$prog_dist > gamma.975$DK_crit)
apply(far, 2, sum, na.rm=TRUE) # 398 cases over 5.1km (97.5%), 612 cases over 3.7km (95%);
far2 = cbind(rabid$prog_dist_conv > gamma.95$DK_crit2, rabid$prog_dist_conv > gamma.975$DK_crit2)
apply(far2, 2, sum, na.rm=TRUE) # 139 cases (97.5%); 216 (95%)
# Lognormal
far_lnorm = cbind(rabid$prog_dist_lnorm > lnorm.95$DK_crit, rabid$prog_dist_lnorm > lnorm.975$DK_crit)
apply(far_lnorm, 2, sum, na.rm=TRUE)# 206 cases over 9km (97.5%), 467 cases over 5.1km (95%)
far2_lnorm = cbind(rabid$prog_dist_conv_lnorm > lnorm.95$DK_crit2, rabid$prog_dist_conv_lnorm > lnorm.975$DK_crit2)  # SHOULD NOT END UP USING ANY FAR2 FROM THE CONVOLVED TREE
apply(far2_lnorm, 2, sum, na.rm=TRUE) # 35 (97.5%); 111 (95%)
# EXAMINE IF PROGENITOR DISTANCE IS BEYOND CONVOLTION THRESHOLD
far_conv = cbind(rabid$prog_dist > gamma.95$DK_crit2, rabid$prog_dist > gamma.975$DK_crit2)
apply(far_conv, 2, sum, na.rm=TRUE) # 196 cases (97.5%); 299 (95%);
far_conv_lnorm = cbind(rabid$prog_dist_lnorm > lnorm.95$DK_crit2, rabid$prog_dist_lnorm > lnorm.975$DK_crit2)
apply(far_conv_lnorm, 2, sum, na.rm=TRUE) # 57, 190
# Cases where SI or DK >97.5%ile PLUS outliers - gamma, lognormal & convolved distributions
longer = (rabid$prog_time>outlier_SI); sum(longer, na.rm=TRUE)  # 18 cases are outliers
longer_lnorm = (rabid$prog_time_lnorm > outlier_SI_lnorm[1]); sum(longer_lnorm, na.rm=TRUE) # 0 outliers - not liekly to use
# farther = (prog_dist>outlier_DK); sum(farther, na.rm = TRUE) # 329 cases are outliers
farther_lnorm = (rabid$prog_dist_lnorm > outlier_DK_lnorm[1]); sum(farther_lnorm, na.rm = TRUE) # 126 cases are outliers - not liekly to use
# INCURSIONS
# Gamma distribution
rm(list=ls())
library(spatstat)
library(maptools)
library(animation)
library(maps)
library(RColorBrewer)
library(GISTools)
library(rgdal)
library(rgeos)
library(codetools)
library(lubridate)
source("R/links.R")
source("R/Trees.R")
# GIS for Serengeti district
SVlines <- rgdal::readOGR(dsn = "data/", layer="SD_Villages_2002_From_HHS_250m_Smoothed_UTM", p4s="+proj=longlat")
crs36S <- CRS("+proj=utm +zone=36 +south +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
SDx=c(639000,703000) ; SDy=c(9760000, 9835000) #Serengeti district limits
# Dog density data
dd=read.csv("output/dog_distribution.csv") #Obtained by running census_import.R
dd=dd[which(!is.na(dd$X)),]
buffer=1000; sigd=-3 #buffer around area and significant digits for the area
xrange=c(round(min(dd$X), sigd)-buffer, round(max(dd$X), sigd)+buffer)
yrange=c(round(min(dd$Y), sigd)-buffer, round(max(dd$Y), sigd)+buffer)
DD=ppp(dd$X, dd$Y, xrange, yrange) # there are some duplicated points
#Dogs per km
m=1000
xb=seq(xrange[1], xrange[2], m)
yb=seq(yrange[1], yrange[2], m)
DDkm=quadratcount(DD, xbreaks = xb, ybreaks = yb)[(length(yb)-1):1,]
den <- density(DD, sigma=500) #Explore range of sigma values
# PLOT SERENGETI DISTRICT with overlay of dog density
SDx=c(639000,703000) ; SDy=c(9760000, 9835000) #Serengeti district limits
par(mfrow=c(1,1), mgp=c(1,.25,0), mar=c(3,3,2,2))
plot(den, col = grey(seq(1, 0, length = max(DDkm))), box=FALSE, main="", ribbon=FALSE)
plot(SVlines, add=TRUE, col="transparent", border="black", lwd=0.1)
# IMPORT DATA
ct <- readRDS(file = "output/clean_bite_data.rda"); dim(ct) # 3260 - needs to match tree data
## SET DATES:  Julian days - day 1 is "2002-01-01"; ## Julian months -  Month 1 is "2002-01-XX" (better to do exactly but a quick fix for now)
start.date <- as.Date("2002-01-01")
end.date <- as.Date("2015-12-31")
ct$ds = as.numeric(ct$Symptoms.started - start.date)
ct$db = as.numeric(ct$Date.bitten - start.date)
ct$yr = year(ct$Symptoms.started); ct$yrb = year(ct$Date.bitten)
ct$ms = month(ct$Symptoms.started) + (12*(ct$yr-2002)) # ceiling(ct$ds/30.5) # hist(ct$ms[!is.na(ct$ms)], breaks=0:250)
ct$mb = month(ct$Date.bitten) + 12*(ct$yrb-2002) # ct$mb2 = ceiling(ct$db/30.5)
rabid = ct[which(!is.na(ct$UTM.Easting)),]; dim(rabid)  # 3215 cases have XY coordinates - 45 removed
# TREES
# Lognormal distributions (with single and convolved distribution for unknown dogs/wildlife)
trees_lnorm <- readRDS(file = "output/sources_lnorm_combo.rda") # trees
LL_lnorm <- readRDS(file = "output/ll_lnorm_combo.rda")
SIprobs_lnorm <- readRDS(file = "output/SIprobs_lnorm_combo.rda")
distprobs_lnorm <- readRDS(file = "output/distprobs_lnorm_combo.rda")
trees2_lnorm <- readRDS(file = "output/sources2_lnorm.rda") # Lognormal convolution ONLY
LL2_lnorm <- readRDS(file = "output/LL2_lnorm.rda")
# Gamma distributions
trees <- readRDS(file = "output/sources.rda") # trees
LL <- readRDS(file = "output/LL.rda")
SIprobs <- readRDS(file = "output/SIprobs.rda")
distprobs <- readRDS(file = "output/distprobs.rda")
trees2 <- readRDS(file = "output/sources2.rda") # convolution ONLY
LL2 <- readRDS(file = "output/LL2.rda")
n <- nrow(trees_lnorm)
nsim <- ncol(trees_lnorm)
n; nsim # 3215 cases, 1000 simulations
# Overall Maximum Likelihood tree - WHY MEAN NOT SUM? seem to give same result (could be either)
MLtree_lnorm <- trees_lnorm[,which.max(apply(LL_lnorm, 2, mean, na.rm=TRUE))] # Lognormal
MLtree2_lnorm <- trees2_lnorm[,which.max(apply(LL2_lnorm, 2, mean, na.rm=TRUE))] # Convolved lognormal
MLtree <- trees[,which.max(apply(LL, 2, mean, na.rm=TRUE))] # Gamma
MLtree2 <- trees2[,which.max(apply(LL2, 2, mean, na.rm=TRUE))] # Convolved gamma
# Most likely progenitor for each tree type (use function: MLprogenitors in links.R)
MLprog_lnorm <- MLprogenitors(LL_lnorm, trees_lnorm) # lognormal
MLprog2_lnorm <- MLprogenitors(LL2_lnorm, trees2_lnorm) # lognormal convolution
MLprog <- MLprogenitors(LL, trees) # Gamma
MLprog2 <- MLprogenitors(LL2, trees2) # Gamma convolution
# ~15% of progenitors mismatch on different algorithms - 85% consistent, roughly 15% mismatches
# 1118/3215 cases were identified by contact tracing i.e. 3215-1118 = 2097 identified only from space time data
sum(is.na(match(MLprog, MLprog_lnorm))) # 200/n assigned progenitors mismatch - 5%; 8% difference
sum(is.na(match(MLprog_lnorm, MLprog))) # 149/n - 6%; 9%
sum(is.na(match(MLprog, MLprog2))) # 470/n mismatch 1.3%, 2% dfference
sum(is.na(match(MLprog_lnorm, MLprog2_lnorm))) # 463/n mismatch 15%
###################################################################
# TROUBLESHOOT THE CASES THAT WERE NOT ASSIGNED PROGENITORS:
NAs=which(is.na(MLtree)); NAs; rabid$ID[NAs]  # ID 231 had symptoms on: 2002-01-07 (1st) but 9051 had symptoms 2002-01-15 +/- 28 days!
###################################################################
###################################################################
# Get the most likely progenitors and their space time distances: use assign_progenitors function
# Before running - assign biters to NA if not in the ID list: 821, 1131, 4194, 5718, 7933, 8307
rabid$Biter.ID[which(rabid$Biter.ID %in% c(821, 1131, 4194, 5718, 7933, 8307)==TRUE)] <- 0
################################################################### CAN SKIP AND JUST LOAD RUNS - TAKES 40 mins total!
# Find best trees
# GAMMA
system.time(test <- assign_progenitors(rabid, trees))  # 11 mins (650 secs) if print, yyy if not printing
loops = find_loops(rabid, test$progenitors) # Find the loops - 24
fixed_progenitors <- fix_loops(loops, test, rabid, trees, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - no more so can assign progenitors!
write.csv(fixed_progenitors, "output/progenitors_gamma.csv", row.names = FALSE)
# GAMMA convolution
system.time(test <- assign_progenitors(rabid, trees2))  # takes 11 mins (650) if print, yyy if not printing
loops = find_loops(rabid, test$progenitors) # Find the loops
fixed_progenitors <- fix_loops(loops, test, rabid, trees2, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - no more so can assign progenitors!
write.csv(fixed_progenitors, "output/progenitors_gamma_conv.csv", row.names = FALSE)
system.time(test <- assign_progenitors(rabid, trees_lnorm))  # takes 11 mins (650) if print, yyy if not printing
loops = find_loops(rabid, test$progenitors) # Find the loops - 28
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - no more so can assign progenitors!
write.csv(fixed_progenitors, "output/progenitors_lognormal.csv", row.names = FALSE)
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
system.time(test <- assign_progenitors(rabid, trees_lnorm))  # takes 11 mins (650) if print, yyy if not printing
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
test
dim(test)
head(test)
fix_loops
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 3) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops
head(test)
head(fixed_progenitors)
dim(fixed_progenitors)
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors <- fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops
head(test)
head(fixed_progenitors)
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors <- fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 3) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors <- fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors <- fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
loops
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
loops
test2 = fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 2) # fix loops
test
test2
dim(test2)
loops
test2 = fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 3) # fix loops
loops2 = find_loops(rabid, test2$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
test2 = fix_loops(loops, test, rabid, trees_lnorm, 3) # fix loops
loops2 = find_loops(rabid, test2$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
test2 = fix_loops(loops, test, fixed_progenitors, trees_lnorm, 3) # fix loops
loops_index <- loops
fixed <- prog_fix <- fix_dist <- fix_time <- rep(FALSE, length=length(loops_index))
fixed
loops_index <- loops
trees <- trees_lnorm
fixed <- prog_fix <- fix_dist <- fix_time <- rep(FALSE, length=length(loops_index))
i=1
progenitors <- table(t(trees[loops_index[i],]))
progenitors
MLprog_rank <- as.numeric(names(rev(sort(progenitors))[1]))
as.numeric(names(rev(sort(progenitors))[1]))
as.numeric(names(rev(sort(progenitors))[2]))
as.numeric(names(rev(sort(progenitors))[3]))
which(rabid$ID==MLprog_rank)
MLprog_rank <- as.numeric(names(rev(sort(progenitors))[3]))
prog_idx = which(rabid$ID==MLprog_rank)
XYs = cbind(rabid$UTM.Easting[prog_idx], rabid$UTM.Northing[prog_idx])
prog_fix[i] = MLprog_rank
fix_dist[i] = dist(rbind(c(rabid$UTM.Easting[loops_index[i]], rabid$UTM.Northing[loops_index[i]]), XYs))
rabid$ds_accuracy = unlist(lapply(rabid$Symptoms.started.accuracy, extract_uncertainty))
ss = replicate(1000, rabid$ds[loops_index[i]] +  add_uncertainty(rabid$ds_accuracy[loops_index[i]]))
db = replicate(1000, rabid$ds[prog_idx] +  add_uncertainty(rabid$ds_accuracy[prog_idx]))
fix_time[i] = mean(abs(ss - db)) # max(abs(ss - db)) # min(abs(ss - db))
fixed[i] <- TRUE   # fix the assignment
fixed[which(prog_info$progenitors[loops_index]== rabid$ID[loops_index[i]])] <- TRUE # And corresponding link in the pair
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
test2 = fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 3) # fix loops
loops2 = find_loops(rabid, test2$progenitors) # check for remaining loops - 2
find_loops(fixed_progenitors, test2$progenitors) # check for remaining loops - 2
loops = find_loops(rabid, test$progenitors) # Find the loops - 102
fixed_progenitors <- fix_loops(loops, test, rabid, trees_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - 2
fixed_progenitors = fix_loops(loops, fixed_progenitors, rabid, trees_lnorm, 3) # fix loops
loops = find_loops(fixed_progenitors, fixed_progenitors$progenitors) # check for remaining loops - 2
write.csv(fixed_progenitors, "output/progenitors_lognormal.csv", row.names = FALSE)
# LOGNORMAL convolution
system.time(test <- assign_progenitors(rabid, trees2_lnorm))  # takes 11 mins (650) if print, 10 mins if not printing
loops = find_loops(rabid, test$progenitors) # Find the loops - 28
fixed_progenitors <- fix_loops(loops, test, rabid, trees2_lnorm, 2) # fix loops
loops = find_loops(rabid, fixed_progenitors$progenitors) # check for remaining loops - no more so can assign progenitors!
write.csv(fixed_progenitors, "output/progenitors_lognormal_conv.csv", row.names = FALSE)
###################################################################
setwd("~/Github/paho_rabies_hf/manuscript")
mex <- readOGR("data/America_Adm_1/Mexico.shp","Mexico")
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
library(maptools)
library(spdep)
library(raster)
library(rgdal)
library(rgeos)
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
getwd()
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","")
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp")
list.files('~/data/ShapeFiles/America_Adm_1', pattern='\\.shp$')
getwd()
list.files('~data/ShapeFiles/America_Adm_1', pattern='\\.shp$')
list.files('~/data/ShapeFiles/America_Adm_1/', pattern='\\.shp$')
list.files('~/data/ShapeFiles/America_Adm_1/')
?list.files
list.files()
?list.dirs()
list.dirs()
mex <- readOGR("/data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
list.files('./data/ShapeFiles/America_Adm_1/')
mex <- readOGR("/data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
getwd()
LAC <- readOGR("data/America_Adm_1/adm1_amro_lat_long.shp","adm1_amro_lat_long")
mex <- readOGR("/data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
LAC <- readOGR("data/America_Adm_1/adm1_amro_lat_long.shp","adm1_amro_lat_long")
LAC <- readOGR("data/America_Adm_1/adm1_amro_lat_long.shp","adm1_amro_lat_long")
LAC <- readOGR("data/America_Adm_1/adm1_amro_lat_long.shp","adm1_amro_lat_long")
mex <- readOGR("data/ShapeFiles/America_Adm_1/Mexico.shp","Mexico")
LAC <- readOGR("data/ShapeFiles/America_Adm_1/adm1_amro_lat_long.shp","adm1_amro_lat_long")
proj4string(LAC); proj4string(mex)
proj4string(mex) <- proj4string(LAC)
mex@data$ADM1_NAME <- language(mex@data$ADM1_NAME)
head(mex@data); dim(mex@data) #32 polygons
unique(mex@data$ADM1_CODE)
nb.units <- poly2nb(mex, queen=FALSE)
##queen=FALSE: more than single shared boundary point required
summary.nb(nb.units)
mat <- nb2mat(nb.units, style="B", zero.policy=TRUE) #Adjacency matrix of polygons
dim(mat)
## Check symmetrical matrix with 0s on diagonal (i.e. not neighbour with self)
sum(colSums(mat)-as.vector(rowSums(mat))) #should equal 0
sum(diag(mat))
mat[1:10,1:10]
## check whether "1" really do stands for the neighbouring units (adjacent)
plot(mex)
i=17
plot(mex[i,], col="red", add=T) #focal polygon
nbs <- which(mat[i,]==1) #rows which correspond to neighbours in shapefile
plot(mex[nbs,],col="blue",add=T) #adjacent polygons
## create a df with mex code names
mat.df <- data.frame(mat)
row.names(mat.df) <- mex@data$ADM1_CODE
colnames(mat.df) <- mex@data$ADM1_CODE
head(mat.df)
mex_box <- bbox(mex); mex_box <- extent(mex_box)
mexico <- crop(LAC,mex_box)
plot(mexico); plot(mex,add=T, col="red")
head(mexico@data); dim(mexico@data) #78 polygons
unique(mexico@data$ADM1_CODE)
mex_box <- bbox(mex)
mex_box <- extent(mex_box)
mex_box
exico <- crop(LAC,mex_box)
mexico <- crop(LAC,mex_box)
plot(LAC)
extent(LAC)
extent(mex)
?crop
crop(LAC,mex_box)
poly2nb(LAC, queen=FALSE)
head(LAC)
?glm
